{"version":3,"sources":["constants/routes.js","context/firebase.js","lib/firebase.js","context/user.js","helpers/protected-route.js","App.js","hooks/use-auth-listener.js","index.js"],"names":["DASHBOARD","LOGIN","SIGN_UP","PROFILE","NOT_FOUND","FirebaseContext","createContext","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FieldValue","firestore","UserContext","ProtectedRoute","user","children","rest","render","location","React","cloneElement","to","pathname","ROUTES","state","from","Login","lazy","SignUp","Dashboard","Profile","NotFound","App","useState","JSON","parse","localStorage","getItem","setUser","useContext","useEffect","listener","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem","useAuthListener","Provider","value","fallback","path","component","exact","whyDidYouRender","trackAllPureComponents","ReactDOM","document","getElementById"],"mappings":"uGAAA,0KAAO,IAAMA,EAAY,IACZC,EAAQ,SACRC,EAAU,WACVC,EAAU,eACVC,EAAY,c,gCCJzB,WAEMC,EAAkBC,wBAAc,MACvBD,O,gCCHf,gFAgBME,GAhBN,YAgBiBC,IAASC,cATX,CACbC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,+CAIDC,EAAeR,IAASS,UAAxBD,Y,gCCjBR,WAEME,EAAcZ,wBAAc,MACnBY,O,kNCEA,SAASC,EAAT,GAAsD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAaC,EAAQ,iBAClE,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAIJ,EACKK,IAAMC,aAAaL,EAAU,CAAED,SAEnCA,EAUE,KARH,cAAC,IAAD,CACEO,GAAI,CACFC,SAAUC,IACVC,MAAO,CAAEC,KAAMP,UCV/B,IAAMQ,EAAQC,gBAAK,kBAAM,gCACnBC,EAASD,gBAAK,kBAAM,gCACpBE,EAAYF,gBAAK,kBAAM,6DACvBG,EAAUH,gBAAK,kBAAM,sDACrBI,EAAWJ,gBAAK,kBAAM,gCAEb,SAASK,IACtB,IAAQlB,ECZK,WACb,MAAwBmB,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,cAAjE,mBAAOvB,EAAP,KAAawB,EAAb,KACQrC,EAAasC,qBAAWxC,KAAxBE,SAkBR,OAhBAuC,qBAAU,WACR,IAAMC,EAAWxC,EAASyC,OAAOC,oBAAmB,SAACC,GAE/CA,GACFR,aAAaS,QAAQ,WAAYX,KAAKY,UAAUF,IAChDN,EAAQM,KAGRR,aAAaW,WAAW,YACxBT,EAAQ,UAIZ,OAAO,kBAAMG,OACZ,CAACxC,IAEG,CAAEa,QDRQkC,GAATlC,KACR,OACE,cAAC,IAAYmC,SAAb,CAAsBC,MAAO,CAAEpC,QAA/B,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUqC,SAAU,2CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAM7B,IAAc8B,UAAW3B,IACtC,cAAC,IAAD,CAAO0B,KAAM7B,IAAgB8B,UAAWzB,IACxC,cAAC,IAAD,CAAOwB,KAAM7B,IAAgB8B,UAAWvB,IACxC,cAACjB,EAAD,CAAgBC,KAAMA,EAAMsC,KAAM7B,IAAkB+B,OAAK,EAAzD,SACE,cAACzB,EAAD,MAEF,cAAC,IAAD,CAAOwB,UAAWtB,a,kBEjB9BwB,IAAgBpC,IAAO,CACrBqC,wBAAwB,IAG1BC,IAASxC,OACP,cAAC,IAAgBgC,SAAjB,CAA0BC,MAAO,CAAEjD,aAAUS,gBAA7C,SACE,cAACsB,EAAD,MAEF0B,SAASC,eAAe,W","file":"static/js/main.51f808a5.chunk.js","sourcesContent":["export const DASHBOARD = '/';\r\nexport const LOGIN = '/login';\r\nexport const SIGN_UP = '/sign-up';\r\nexport const PROFILE = '/p/:username';\r\nexport const NOT_FOUND = '/not-found';\r\n","import { createContext } from 'react';\r\n\r\nconst FirebaseContext = createContext(null);\r\nexport default FirebaseContext;\r\n","import Firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// here I want to import the seed file\r\n// import { seedDatabase } from '../seed';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyDpW1TItPIwgO2-bRWe_GAXNXQBUU1oGJk',\r\n  authDomain: 'instagram-yt-269e8.firebaseapp.com',\r\n  projectId: 'instagram-yt-269e8',\r\n  storageBucket: 'instagram-yt-269e8.appspot.com',\r\n  messagingSenderId: '825022420802',\r\n  appId: '1:825022420802:web:e7a5298d95265d9012dadb'\r\n};\r\n\r\nconst firebase = Firebase.initializeApp(config);\r\nconst { FieldValue } = Firebase.firestore;\r\n\r\n// here is where I want to call the seed file (only ONCE!)\r\n// seedDatabase(firebase);\r\n\r\nexport { firebase, FieldValue };\r\n","import { createContext } from 'react';\r\n\r\nconst UserContext = createContext(null);\r\nexport default UserContext;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport * as ROUTES from '../constants/routes';\r\n\r\nexport default function ProtectedRoute({ user, children, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        if (user) {\r\n          return React.cloneElement(children, { user });\r\n        }\r\n        if (!user) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: ROUTES.LOGIN,\r\n                state: { from: location }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nProtectedRoute.propTypes = {\r\n  user: PropTypes.object,\r\n  children: PropTypes.object.isRequired\r\n};\r\n","import { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\nimport UserContext from './context/user';\nimport useAuthListener from './hooks/use-auth-listener';\n\nimport ProtectedRoute from './helpers/protected-route';\n\nconst Login = lazy(() => import('./pages/login'));\nconst SignUp = lazy(() => import('./pages/sign-up'));\nconst Dashboard = lazy(() => import('./pages/dashboard'));\nconst Profile = lazy(() => import('./pages/profile'));\nconst NotFound = lazy(() => import('./pages/not-found'));\n\nexport default function App() {\n  const { user } = useAuthListener();\n  return (\n    <UserContext.Provider value={{ user }}>\n      <Router>\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <Route path={ROUTES.LOGIN} component={Login} />\n            <Route path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route path={ROUTES.PROFILE} component={Profile} />\n            <ProtectedRoute user={user} path={ROUTES.DASHBOARD} exact>\n              <Dashboard />\n            </ProtectedRoute>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\r\nimport FirebaseContext from '../context/firebase';\r\n\r\nexport default function useAuthListener() {\r\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\r\n  const { firebase } = useContext(FirebaseContext);\r\n\r\n  useEffect(() => {\r\n    const listener = firebase.auth().onAuthStateChanged((authUser) => {\r\n      // we have a user ... therefore we can store the user in localstorage\r\n      if (authUser) {\r\n        localStorage.setItem('authUser', JSON.stringify(authUser));\r\n        setUser(authUser);\r\n      } else {\r\n        // we don't have an authUser, therefore clear the localstorage\r\n        localStorage.removeItem('authUser');\r\n        setUser(null);\r\n      }\r\n    });\r\n\r\n    return () => listener();\r\n  }, [firebase]);\r\n\r\n  return { user };\r\n}\r\n","import React from 'react';\n\nimport whyDidYouRender from '@welldone-software/why-did-you-render';\n\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FirebaseContext from './context/firebase';\nimport { firebase, FieldValue } from './lib/firebase';\nimport './styles/styles.app.css';\n\nwhyDidYouRender(React, {\n  trackAllPureComponents: true\n});\n\nReactDOM.render(\n  <FirebaseContext.Provider value={{ firebase, FieldValue }}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}